package last.dga.dected.experiment;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import tool.function.KmeansF17;
import tool.function.ReadWrite;


public class CutCluster_Malware7 {

//	final String sourcePath = "experimentData/tagDataset/50Traindga";
//	final String outputPath = "experimentData/tagDataset/50Traindga.cluster";
	String sourcePath = "";
	String featurePath = "";
	String outputPath = "";
	int cluster = 0;
	
	ReadWrite rw = new ReadWrite();
	
	public void setPath(String sourcePath , String featurePath , String outputPath , int cluster){
		this.sourcePath = sourcePath;
		this.featurePath = featurePath;
		this.outputPath = outputPath;
		this.cluster = cluster;
	}
	
	public void enterPoint() throws Exception {
//		CutCluster_Malware7 mainClass = new CutCluster_Malware7();
		int k_value = this.cluster;
		HashMap<String, String> clusterMap = this.getCluster(k_value);
//		System.out.println(clusterMap);
		HashMap<Integer, ArrayList<String>>  clusterResult = this.mergeCluster(clusterMap);
		this.outputClusterToFile(clusterResult);
		System.out.println("__CutCluster_Malware7___Finish____");
	}

	void outputClusterToFile(HashMap<Integer, ArrayList<String>>  clusterResult){
		for(int key:clusterResult.keySet()){
			String path = this.outputPath+key;
			this.rw.cleanFile(path);
			ArrayList<String> dnsList= clusterResult.get(key);
			for(String dns:dnsList){
				dns = dns.split(",")[0];
				this.rw.appendWrite(path, dns);
			}
		}
	}
	HashMap<Integer, ArrayList<String>> mergeCluster(HashMap<String, String> clusterMap) throws IOException{
//		this.rw.cleanFile(this.outputPath);
		HashMap<Integer, ArrayList<String>>  clusterResult = new HashMap<Integer, ArrayList<String>>();
		BufferedReader br = new BufferedReader(new FileReader(this.sourcePath));
		while(br.ready()){
			String line = br.readLine();
			String malware = line.split(",")[1];
			if(!(clusterMap.get(malware)==null)){	//如果malware產生的網域名稱數量小於2就不計算
//				this.rw.appendWrite(this.outputPath, data);
				int key = Integer.valueOf(clusterMap.get(malware));
				String domain = line.split(",")[0];
				
				if(clusterResult.containsKey(key)){
					ArrayList<String> list = new ArrayList<String>();
					list = clusterResult.get(key);
					list.add(domain);
					clusterResult.put(key, list);
				}else{
					ArrayList<String> list = new ArrayList<String>();
					list.add(domain);
					clusterResult.put(key, list);
				}
			}
		}
		return clusterResult;
	}
	
	HashMap<String, String> getCluster(int k_value) throws Exception{
		KmeansF17 kmeans = new KmeansF17();
		HashMap<String, String> resultMap = new HashMap<String, String>();
		HashMap<Integer, ArrayList<String>> clusterMap = new HashMap<Integer, ArrayList<String>>();
		clusterMap = kmeans.Kmeans(this.featurePath,k_value);
		for(int key:clusterMap.keySet()){
			ArrayList<String> arr = new ArrayList<String>();
			arr = clusterMap.get(key);
			for(String malware:clusterMap.get(key)){
				resultMap.put(malware, String.valueOf(key));
			}
		}
		return resultMap;
	}
	

}
